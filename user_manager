import com.collibra.dgc.core.api.model.ResourceType
import com.collibra.dgc.core.api.dto.user.FindUsersRequest
import com.collibra.dgc.core.api.dto.instance.responsibility.FindResponsibilitiesRequest

// 1. Récupérer l'identifiant de l'utilisateur initiateur
def initiatorUserName = initiator
def user = userApi.findUsers(FindUsersRequest.builder()
                             .name(initiatorUserName).build()).getResults().first()
def startUserEmail = user.getEmailAddress()
execution.setVariable("startUserEmail", startUserEmail)
execution.setVariable("initiatorUserName", initiatorUserName)

// 2. Identifier les responsables Data Owner Bis à partir de leur rôle
def rolesIdDO = [string2Uuid(dataOwnerBisUuid)]
def findResponsibilitiesRequestDO = FindResponsibilitiesRequest.builder()
    .roleIds(rolesIdDO)
    .resourceIds([relatedAssetId])
    .build()

def ownerListDO = responsibilityApi.findResponsibilities(findResponsibilitiesRequestDO).getResults()*.getOwner()

def DataOwnerBis = []

// 3. Traiter les résultats et formater la liste
ownerListDO.each { currentItem ->
    loggerApi.info("${currentItem} OWNER CURRENT ITEM")
    
    if (currentItem.getResourceType() == ResourceType.UserGroup) {
        DataOwnerBis.add("group(${userGroupApi.getUserGroup(currentItem.getId()).getUserName()})")
    } else {
        DataOwnerBis.add("user(${userApi.getUser(currentItem.getId()).getUserName()})")
    }
}

// 4. Stocker les variables dans le contexte du workflow
execution.setVariable("DataOwnerBis", utility.toCsv(DataOwnerBis))

// 5. Extraire l'email du premier utilisateur si présent (et non un groupe)
def username_DO = DataOwnerBis[0].replaceAll(/user\(|\)/, "")
def user_DO = userApi.findUsers(FindUsersRequest.builder()
                             .name(username_DO).build()).getResults().first()
def DataOwnerBisEmail = user_DO.getEmailAddress()
execution.setVariable("DataOwnerBisEmail", DataOwnerBisEmail)
